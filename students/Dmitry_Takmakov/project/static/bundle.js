(()=>{"use strict";const t=(t,e="GET",n={})=>new Promise(((s,r)=>{let a;window.XMLHttpRequest?a=new XMLHttpRequest:window.ActiveXObject&&(a=new ActiveXObject("Microsoft.XMLHTTP")),a.timeout=5e3,a.ontimeout=()=>{"GET"==e?console.log(`GET request for ${t} timed out!`):console.log(`POST request for ${t} timed out!`)},a.onreadystatechange=()=>{4===a.readyState&&(200===a.status?s(JSON.parse(a.responseText)):(console.log("Error!",a.responseText),r(a.responseText)))},a.open(e,`http://localhost:3500/api/${t}`),a.setRequestHeader("Content-Type","application/json"),a.send(JSON.stringify(n))}));Vue.component("v-nothing-found",{template:"\n        <p>Ошибка! Данные не получены!</p>\n    "}),Vue.component("v-header",{props:["cartVisible","cartItems","search","error"],template:'\n        <header>\n            <nav class="navbar navbar-light d-flex bg-light">\n                <a class="navbar-brand flex-grow-1">Vinyl Webshop</a>\n                <v-search\n                    @newSearch="newSearchInput"\n                ></v-search>\n                <button @click="cartClickHandler" type="submit"><i\n                        class="fas fa-shopping-cart"></i></button>\n                <div v-if="cartVisible" class="cart">\n                    <ul class="list-group mb-3">\n                        <v-basket\n                            v-for="item in cartItems"\n                            :key="item.product_id"\n                            :element="item"\n                            @delete="deleteHandler"\n                        ></v-basket>\n                        <v-nothing-found v-if="error" />\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    ',methods:{cartClickHandler(){this.$emit("change-cart-visibility")},newSearchInput(t){this.$emit("search",t)},deleteHandler(t){this.$emit("delete-item",t)}}}),Vue.component("v-basket",{props:["element"],template:'\n    <li class="d-flex justify-content-between lh-sm cart-item">\n        <div>\n            <img :src="element.cover" :alt="element.title">\n        </div>\n        <div>\n            <h6 class="my-0">{{ element.title }}</h6>\n        </div>\n        <span class="text-muted">{{ element.quantity }}</span> x\n        <span class="text-muted">$ {{ element.price }}</span>\n        <button @click="$emit(\'delete\', element.product_id)"><i class="fas fa-trash-alt"></i></button>\n    </li>\n    '}),Vue.component("v-search",{template:'\n    <form class="d-flex searchbar">\n        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search"\n            @input="searchInput">\n    </form>\n    ',methods:{searchInput(){this.$emit("newSearch",this.$el.lastChild.value)}}}),Vue.component("v-product-list",{props:["products","error"],template:'\n        <main>\n            <div class="products_list">\n                    <v-product\n                        v-for="product in products"\n                        :key="product.product_id"\n                        :element="product"\n                        @addProductToCart="addToCartHandler"\n                    ></v-product>\n                <v-nothing-found v-if="error" />\n                <div v-if="!products.length" class="empty-products">\n                    Ничего не найдено :(\n                </div>\n            </div>\n        </main>\n    ',methods:{addToCartHandler(t){this.$emit("add",t)}}}),Vue.component("v-product",{props:["element"],template:'\n        <div class="card">\n            <img :src="element.cover" class="card-img-top" :alt="element.product_id">\n            <div class="card-body">\n                <h5 class="card-title">{{ element.title }}</h5>\n                <p class="card-text">Record price: $ {{ element.price }}</p>\n                <button type="button" class="btn btn-primary" @click="addProductToCart"><i\n                        class="fas fa-cart-plus"></i> Add to cart</button>\n            </div>\n        </div>\n    ',methods:{addProductToCart(){this.$emit("addProductToCart",this.element)}}}),new Vue({el:"#app",data:{products:[],cartItemsList:[],searchLine:"",isCartVisible:!1,isError:!1},mounted(){this.getData(),this.getCartData()},methods:{getData(){return new Promise(((e,n)=>{t("products").then((t=>{this.products=t,e()})).catch((()=>{this.isError=!0}))}))},getCartData(){return new Promise(((e,n)=>{t("basket").then((t=>{this.cartItemsList=t,e()})).catch((()=>{this.isError=!0}))}))},addProductToCart(e){t("basket","POST",e).then((t=>{if(console.log("Result: ",t),!t.success)return void console.log("Error adding to basket.");let n=this.cartItemsList.findIndex((t=>t.product_id===e.product_id));n>-1?this.cartItemsList[n].quantity+=1:(this.cartItemsList.push(e),this.cartItemsList[this.cartItemsList.length-1].quantity=1)})).catch((t=>{console.log(`Can't add item ${e} to cart.`,t)}))},removeProductFromCart(e){t(`basket/${e}`,"DELETE").then((t=>{console.log("Result: ",t),t.success?this.cartItemsList=this.cartItemsList.filter((t=>t.product_id!==parseInt(e))):console.log("Error deleting item from cart")})).catch((t=>{console.log(`Can't remove item #${e} to cart.`,t)}))},setNewSearchValue(t){this.searchLine=t}},computed:{filteredProducts(){const t=new RegExp(this.searchLine.trim(),"i");return this.products.filter((e=>t.test(e.title)))},totalPrice(){return this.products.reduce(((t,e)=>t+e.price),0)}}})})();